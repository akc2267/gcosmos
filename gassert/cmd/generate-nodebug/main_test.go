package main

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestRewriteSource_requiresDebugBuildTag(t *testing.T) {
	t.Parallel()

	src := []byte(`// Missing build tag.

package foo

func (s S) invariantNoArgs() {
	s.assertEnv.HandleAssertionFailure("foo")
}
`)

	var out bytes.Buffer
	err := RewriteSource("s_debug.go", src, &out)
	require.Error(t, err)
	require.Contains(t, err.Error(), "refusing to generate")
}

func TestRewriteSource_methods_noImports(t *testing.T) {
	t.Parallel()

	src := []byte(`//go:build debug

package foo

func (s S) invariantNoArgs() {
	s.assertEnv.HandleAssertionFailure("foo")
}

func (s *S) invariantBuiltinArg(n int) {
	if n > 0 {
		s.assertEnv.HandleAssertionFailure("n was positive")
	}
}
`)

	var out bytes.Buffer
	require.NoError(t, RewriteSource("s_debug.go", src, &out))

	exp := `//go:build !debug

// Code generated by github.com/rollchains/gordian/gassert/cmd/generate-nodebug s_debug.go; DO NOT EDIT.

package foo

func (s S) invariantNoArgs() {}

func (s *S) invariantBuiltinArg(n int) {}
`

	require.Equal(t, exp, out.String())
}

func TestRewriteSource_methods_withAllImportsRetained_stdlibOnly(t *testing.T) {
	t.Parallel()

	src := []byte(`//go:build debug

package foo

import (
	"io"
)

func (s S) invariantCloseReader(rc io.ReadCloser) {
	s.assertEnv.HandleAssertionFailure("foo")
}
`)

	var out bytes.Buffer
	require.NoError(t, RewriteSource("r_debug.go", src, &out))

	exp := `//go:build !debug

// Code generated by github.com/rollchains/gordian/gassert/cmd/generate-nodebug r_debug.go; DO NOT EDIT.

package foo

import (
	"io"
)

func (s S) invariantCloseReader(rc io.ReadCloser) {}
`

	require.Equal(t, exp, out.String())
}

func TestRewriteSource_methods_withAllImportsRetained_thirdPartyOnly(t *testing.T) {
	t.Parallel()

	src := []byte(`//go:build debug

package usethirdparty

import (
	"example.com/pkg1"
	"example.com/x/pkg2"
)

func (s S) invariantTwoExternalTypes(a pkg1.A, b pkg2.B) {
	s.assertEnv.HandleAssertionFailure("foo")
}
`)

	var out bytes.Buffer
	require.NoError(t, RewriteSource("r_debug.go", src, &out))

	exp := `//go:build !debug

// Code generated by github.com/rollchains/gordian/gassert/cmd/generate-nodebug r_debug.go; DO NOT EDIT.

package usethirdparty

import (
	"example.com/pkg1"
	"example.com/x/pkg2"
)

func (s S) invariantTwoExternalTypes(a pkg1.A, b pkg2.B) {}
`

	require.Equal(t, exp, out.String())
}

func TestRewriteSource_methods_withAllImportsRetained_thirdPartyOnly_someRenamed(t *testing.T) {
	t.Parallel()

	src := []byte(`//go:build debug

package usethirdparty

import (
	"example.com/pkg1"
	"example.com/pkg2"
	pkg3 "example.com/pkg/three"
)

func (s S) invariantThreeExternalTypes(a pkg1.A, b pkg2.B, c pkg3.C) {
	s.assertEnv.HandleAssertionFailure("foo")
}
`)

	var out bytes.Buffer
	require.NoError(t, RewriteSource("r_debug.go", src, &out))

	exp := `//go:build !debug

// Code generated by github.com/rollchains/gordian/gassert/cmd/generate-nodebug r_debug.go; DO NOT EDIT.

package usethirdparty

import (
	"example.com/pkg1"
	"example.com/pkg2"
	pkg3 "example.com/pkg/three"
)

func (s S) invariantThreeExternalTypes(a pkg1.A, b pkg2.B, c pkg3.C) {}
`

	require.Equal(t, exp, out.String())
}

func TestRewriteSource_methods_withAllImportsRetained_stdlibAndThirdParty(t *testing.T) {
	t.Parallel()

	src := []byte(`//go:build debug

package mixed

import (
	"io"

	"example.com/pkg1"
)

func (s S) invariantReaderA(r io.Reader, a pkg1.A) {
	s.assertEnv.HandleAssertionFailure("foo")
}
`)

	var out bytes.Buffer
	require.NoError(t, RewriteSource("r_debug.go", src, &out))

	exp := `//go:build !debug

// Code generated by github.com/rollchains/gordian/gassert/cmd/generate-nodebug r_debug.go; DO NOT EDIT.

package mixed

import (
	"io"

	"example.com/pkg1"
)

func (s S) invariantReaderA(r io.Reader, a pkg1.A) {}
`

	require.Equal(t, exp, out.String())
}

func TestRewriteSource_stdlibSlashes(t *testing.T) {
	t.Parallel()

	src := []byte(`//go:build debug

package stdlibslashes

import (
	"io"
	"net/http"
)

func (s S) invariantReaderHTTP(r io.Reader, req *http.Request) {
	s.assertEnv.HandleAssertionFailure("foo")
}
`)

	var out bytes.Buffer
	require.NoError(t, RewriteSource("r_debug.go", src, &out))

	exp := `//go:build !debug

// Code generated by github.com/rollchains/gordian/gassert/cmd/generate-nodebug r_debug.go; DO NOT EDIT.

package stdlibslashes

import (
	"io"
	"net/http"
)

func (s S) invariantReaderHTTP(r io.Reader, req *http.Request) {}
`

	require.Equal(t, exp, out.String())
}

func TestRewriteSource_functions(t *testing.T) {
	t.Parallel()

	src := []byte(`//go:build debug

package pathological

import (
	"io"
	nethttp "net/http"

	"example.com/pkg1"
	"example.com/pkg2"
)

func invariantReaderHTTP(r io.Reader, req *nethttp.Request) {
	if r == nil || req == nil {
		// Do something...
	}
}

func invariantThirdParty(a pkg1.A) {
	a.RequireSomething(pkg2.NewFoo())
}
`)

	var out bytes.Buffer
	require.NoError(t, RewriteSource("r_debug.go", src, &out))

	exp := `//go:build !debug

// Code generated by github.com/rollchains/gordian/gassert/cmd/generate-nodebug r_debug.go; DO NOT EDIT.

package pathological

import (
	"io"
	nethttp "net/http"

	"example.com/pkg1"
)

func invariantReaderHTTP(r io.Reader, req *nethttp.Request) {}

func invariantThirdParty(a pkg1.A) {}
`

	require.Equal(t, exp, out.String())
}

func TestRewriteSource_functionsWithReturnValues(t *testing.T) {
	t.Parallel()

	src := []byte(`//go:build debug

package pathological

import (
	"io"
	"errors"

	"example.com/pkg1"
	"example.com/pkg2"
)

func invariantReaderNamedReturns(r io.Reader) (n int, err error) {
	return 1, errors.New("uh oh")
}

func invariantReaderUnnamedReturns(r io.Reader) (int, error) {
	return 2, nil
}

func invariantMultipleUnnamedReturnsSameType() (string, string, string) {
	return "", "", ""
}

func invariantMultipleNamedReturnsSameType() (a, b uint) {
	return 10, 20
}

func invariantWriterBareSingleReturn(w io.Writer) pkg1.A {
	return pkg2.DoSomething(w)
}
`)

	var out bytes.Buffer
	require.NoError(t, RewriteSource("r_debug.go", src, &out))

	exp := `//go:build !debug

// Code generated by github.com/rollchains/gordian/gassert/cmd/generate-nodebug r_debug.go; DO NOT EDIT.

package pathological

import (
	"io"

	"example.com/pkg1"
)

func invariantReaderNamedReturns(r io.Reader) (n int, err error) {
	return
}

func invariantReaderUnnamedReturns(r io.Reader) (_ int, _ error) {
	return
}

func invariantMultipleUnnamedReturnsSameType() (_ string, _ string, _ string) {
	return
}

func invariantMultipleNamedReturnsSameType() (a, b uint) {
	return
}

func invariantWriterBareSingleReturn(w io.Writer) (_ pkg1.A) {
	return
}
`

	require.Equal(t, exp, out.String())
}
