From 9e1113c69d306ad0494bff16412d05b1859f52e1 Mon Sep 17 00:00:00 2001
From: Mark Rushakoff <mark@strange.love>
Date: Wed, 17 Jul 2024 09:51:38 -0400
Subject: [PATCH 4/6] chore: allow discovery of anonymous GRPC server addr

Add a --grpc-address-file argument, so that if the gRPC server is
configured to bind to :0, that file, in a predetermined location, will
contain the actual bound address.

And fix the server start command to actually expose that flag.
---
 server/v2/api/grpc/server.go | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

diff --git a/server/v2/api/grpc/server.go b/server/v2/api/grpc/server.go
index c5e31f5dfc..3837c9bb1e 100644
--- a/server/v2/api/grpc/server.go
+++ b/server/v2/api/grpc/server.go
@@ -4,7 +4,9 @@ import (
 	"context"
 	"fmt"
 	"net"
+	"os"
 
+	"github.com/spf13/pflag"
 	"github.com/spf13/viper"
 	"google.golang.org/grpc"
 
@@ -20,6 +22,8 @@ type GRPCServer[T transaction.Tx] struct {
 	cfgOptions []CfgOption
 
 	grpcSrv *grpc.Server
+
+	v *viper.Viper
 }
 
 // New creates a new grpc server.
@@ -53,6 +57,7 @@ func (s *GRPCServer[T]) Init(appI serverv2.AppI[T], v *viper.Viper, logger log.L
 	s.grpcSrv = grpcSrv
 	s.config = cfg
 	s.logger = logger.With(log.ModuleKey, s.Name())
+	s.v = v
 
 	return nil
 }
@@ -75,6 +80,12 @@ func (s *GRPCServer[T]) Config() any {
 	return s.config
 }
 
+// This flag has a leading dot to ensure it does not conflict with
+// the core grpc configuration,
+// as SDK setup involves prefix matching that will sometimes match
+// this flag as a false positive.
+const addrFileFlag = ".grpc-address-file"
+
 func (s *GRPCServer[T]) Start(ctx context.Context) error {
 	if !s.config.Enable {
 		return nil
@@ -85,6 +96,13 @@ func (s *GRPCServer[T]) Start(ctx context.Context) error {
 		return fmt.Errorf("failed to listen on address %s: %w", s.config.Address, err)
 	}
 
+	addrFile := s.v.GetString(addrFileFlag)
+	if addrFile != "" {
+		if err := os.WriteFile(addrFile, []byte(listener.Addr().String()+"\n"), 0600); err != nil {
+			panic(fmt.Errorf("failed to write addr file: %w", err))
+		}
+	}
+
 	errCh := make(chan error)
 
 	// Start the gRPC in an external goroutine as Serve is blocking and will return
@@ -112,3 +130,9 @@ func (s *GRPCServer[T]) Stop(ctx context.Context) error {
 
 	return nil
 }
+
+func (s *GRPCServer[T]) StartCmdFlags() *pflag.FlagSet {
+	flags := pflag.NewFlagSet("grpc", pflag.ExitOnError)
+	flags.String(addrFileFlag, "", "Write the actual listen address to the given file (useful for tests when configured to listen on :0)")
+	return flags
+}
-- 
2.44.0

